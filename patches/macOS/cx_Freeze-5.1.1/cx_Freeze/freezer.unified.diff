--- cx_Freeze/freezer.py	2017-12-16 18:39:21.000000000 +0100
+++ /Users/rs/anaconda3/lib/python3.6/site-packages/cx_Freeze/freezer.py	2018-02-24 13:18:47.000000000 +0100
@@ -269,6 +269,7 @@
         """Return the file's dependencies using platform-specific tools (the
            imagehlp library on Windows, otool on Mac OS X and ldd on Linux);
            limit this list by the exclusion lists as needed"""
+        dirname = os.path.dirname(path)
         dependentFiles = self.dependentFiles.get(path)
         if dependentFiles is None:
             if sys.platform == "win32":
@@ -325,9 +326,34 @@
                     dependentFiles = [p.replace('@rpath', sys.prefix + '/lib')
                                       for p in dependentFiles]
             dependentFiles = self.dependentFiles[path] = \
-                    [f for f in dependentFiles if self._ShouldCopyFile(f)]
+                    [self._CheckupDependentFile(f, dirname) for f in dependentFiles if self._ShouldCopyFile(f) 
+                        if self._CheckupDependentFile(f, dirname)]
         return dependentFiles
 
+
+    def _CheckupDependentFile(self, dependentFile, dirname):
+        """Check that the file exists. If not, try to add the dirname of the
+        file that depends of it to see if the file exists in the same directory.
+        If it finds a file that exists, returns it. Else, raise an error.
+
+        This is a patch to a bug stated in Issue #292:
+        https://github.com/anthony-tuininga/cx_Freeze/issues/292
+        """
+        if os.path.isfile(dependentFile):
+            return dependentFile
+        # file does not exists. Try to append the dirname of the parent file
+        # This is just a patch that tries to get the file returned by otool
+        # in a possible likely spot it could be found.
+        basename = os.path.basename(dependentFile)
+        joined = os.path.join(dirname, basename)
+        if os.path.isfile(joined):
+            return joined
+        print('RENE: ERROR: not found:', dependentFile, joined)
+        return
+        # if we are here, file was not found neither in the parent file dir.
+        raise FileNotFoundError("otool returned a dependent file that"
+                                " could not be found: %s" % dependentFile)
+
     def _GetModuleFinder(self, argsSource = None):
         if argsSource is None:
             argsSource = self
